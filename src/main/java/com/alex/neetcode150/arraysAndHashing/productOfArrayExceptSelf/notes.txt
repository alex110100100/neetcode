===================================
238. Product of Array Except Self
===================================

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.


Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]



===================================
Solution
===================================

This problem appears easy at first, but is made difficult by the constraints that it must run in O(n) time,
and you are not allowed to divide.

Without those constraints, for each element, you could just multiply all the other elements together (but that would be O(n^2))
Or, you could multiply them all initially, then iterate through and divide by each one (but we're not allowed to divide).

So, to get around the constraints, there are 2 solutions you can use. They are essentially the same,
but the second one uses constant space so is better.


Solution 1:

    -  Let's say our input array is nums = [2, 1, 3, 4].
    -  We would want to return [12, 24, 8, 6]

    Note that for each i, the result is the product of the elements to its left * the product of the elements to its right.

    Therefore, we can construct 1 array to hold the products of all elements starting from the left,
    and another array but this time starting from the right. They would end up looking like this:

    leftProducts array:
        leftProducts[i] is the product of elements from nums[0] to nums[i -1]

        NB: We must initialise leftProducts[0] = 1, because there are no elements left of position 0 in the original nums array.

        e.g. [1, 2, 2, 6]

    rightProducts array:
        rightProducts[i] is the product of elements from nums[i + 1] to nums[nums.length - 1]

        NB: We must initialise rightProducts[nums.length - 1] = 1, because there are no elements right of position nums.length - 1 in the original nums array.

        e.g. [12, 12, 4, 1]


    - Now that we have our 2 arrays with the left and right products, we just need to multiple each element in
      leftProducts with each element in rightProducts to get the correct result!





Solution 2:

        Same idea as above, but note that don't actually need to create a new array for rightProducts!
        While we are iterating backwards, we can just go ahead and multiply them with leftProducts there and then as we go!
        i.e. after we determine each rightProduct, we multiply with the element in leftProducts and replace that element with the result.

        So we would only being creating one array with this solution, and returning that as the result array.

